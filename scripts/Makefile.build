#
# Kernel Top Makefile
#
# File Name:   Makefile
# Author:      Yang Yujun
# E-mail:      <yujiantianhu@163.com>
# Created on:  2024.04.12
#
# Copyright (c) 2024   Yang Yujun <yujiantianhu@163.com>
#

# '_build' must be the first target
_build:

obj-y		:=
inc-y		:=
VPATH		:=

include $(CONF_MAKEFILE)
include Makefile

# get current path
cur_path	:= 	$(shell pwd)
obj_path	:=	$(patsubst $(PROJECT_DIR)%, $(OBJECT_PATH)%, $(cur_path))

# get built-in.o in subdirectory
dir-y		:=	$(patsubst %/, %, $(filter %/, $(obj-y)))

ifeq ($(dir-y),)
build-obj	:=

else
build-obj	:=	$(addsuffix /built-in.o, $(dir-y))
build-obj	:=	$(addprefix $(cur_path)/, $(build-obj))
build-obj	:=	$(patsubst $(PROJECT_DIR)%, $(OBJECT_PATH)%, $(build-obj))
endif

# get xxx.o and xxx.o.d in current directory
output-obj	:=	$(filter-out %/, $(obj-y))
depend-obj	:=
output-dirs	:=

ifneq ($(output-obj),)
abspath-obj :=	$(patsubst $(cur_path)/%,$(obj_path)/%,$(filter $(cur_path)/%, $(output-obj)))
relpath-obj :=	$(patsubst %,$(obj_path)/%,$(filter-out $(cur_path)/%, $(output-obj)))
output-obj	:=	$(abspath-obj) $(relpath-obj)
output-dirs	:=	$(sort $(dir $(output-obj)))

depend-obj	:=	$(foreach file, $(output-obj), $(addsuffix .d, $(file)))
-include $(depend-obj)
endif

local_built	:= 	$(obj_path)/built-in.o
local_cmd	:= 	$(obj_path)/build-in.o.cmd

VPATH			+= $(cur_path)
INCLUDE_DIRS 	+= $(inc-y)

define build_object
	$(1) -Wp,-MD,$@.d -c $(BUILD_CFLAGS) $(MACROS) $(INCLUDE_DIRS) $(EXTRA_FLAGS) -o $(2) $(3)
endef

define build_recusion
	@for dir in $(dir-y); do $(Q)$(MAKE) -C $$dir -f $(BUILD_SCRIPT) $(1); done
endef

_force:
.PHONY:	_build _all _force _clean _distclean _debug

_build: _all

_all : $(local_built) $(output-obj) _force
	if [ -e $(local_cmd) ]; then rm -f $(local_cmd); fi
ifneq ($(output-obj),)
	@echo $(output-obj) > $(local_cmd)
endif
	@for item in $(build-obj); do \
		if [ -e $$item ]; then	\
			if [ -e $(local_cmd) ]; then	\
				echo $$item >> $(local_cmd);	\
			else	\
				echo $$item > $(local_cmd);	\
			fi;	\
		fi	\
	done
	if [ -s $(local_cmd) ]; then $(LD) -EL -r -o $(local_built) `cat $(local_cmd)`; fi

$(local_built) : _force
	$(call build_recusion, _build)
	if [ ! -d $(obj_path) ]; then mkdir -p $(obj_path); fi
	@for item in $(output-dirs); do \
		if [ ! -d $$item ]; then \
			mkdir -p $$item;	\
		fi	\
	done

$(obj_path)/%.o : %.S _force
	$(call build_object, $(CC), $@, $<)

$(obj_path)/%.o : %.c _force
	$(call build_object, $(CC), $@, $<)

$(obj_path)/%.o : %.cpp _force
	$(call build_object, $(CXX), $@, $<)

_clean:
	$(call build_recusion, _clean)
	rm -rf $(output-obj) $(build-obj) $(depend-obj) $(local_cmd)
	rm -rf $(obj_path)

_distclean: _clean
	
_debug:
	$(call build_recusion, _debug);
	@echo '==========>' $(src-y)
	@echo '++++++++++>' $(VPATH)

# end of file
