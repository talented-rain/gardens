#
# Kernel Top Makefile
#
# File Name:   Makefile
# Author:      Yang Yujun
# E-mail:      <yujiantianhu@163.com>
# Created on:  2024.04.12
#
# Copyright (c) 2024   Yang Yujun <yujiantianhu@163.com>
#

build:

obj-y		:=

include Makefile

# get current path
cur_path	:= 	$(shell pwd)
obj_path	:=	$(patsubst $(PROJECT_DIR)%, $(OBJECT_PATH)%, $(cur_path))

# get built-in.o in subdirectory
dir-y		:=	$(patsubst %/, %, $(filter %/, $(obj-y)))

ifeq ($(dir-y),)
build-obj	:=

else
build-obj	:=	$(addsuffix /built-in.o, $(dir-y))
build-obj	:=	$(addprefix $(cur_path)/, $(build-obj))
build-obj	:=	$(patsubst $(PROJECT_DIR)%, $(OBJECT_PATH)%, $(build-obj))
endif

# get xxx.o and xxx.o.d in current directory
ouput-obj	:=	$(filter-out %/, $(obj-y))
depend-obj	:=	$(foreach file, $(ouput-obj), $(addsuffix .d, $(file)))

ifneq ($(ouput-obj),)
ouput-obj	:=	$(addprefix $(cur_path)/, $(ouput-obj))
ouput-obj	:=	$(patsubst $(PROJECT_DIR)%, $(OBJECT_PATH)%, $(ouput-obj))
endif

ifneq ($(depend-obj),)
depend-obj	:=	$(addprefix $(cur_path)/, $(depend-obj))
depend-obj	:=	$(patsubst $(PROJECT_DIR)%, $(OBJECT_PATH)%, $(depend-obj))
depend-obj	:=	$(wildcard $(depend-obj))

include $(depend-obj)
endif

VPATH		:=	$(cur_path)
.PHONY		+=	build debug

build : $(obj_path)/built-in.o

$(obj_path)/built-in.o : $(build-obj) $(ouput-obj)
	$(LD) -EL -r -o $@ $^

$(build-obj):
	@for dir in $(dir-y); do $(Q)$(MAKE) -C $$dir -f $(BUILD_SCRIPT); done

$(obj_path)/%.o : %.c
	if [ ! -d $(obj_path) ]; then mkdir -p $(obj_path); fi
	$(CC) -Wp,-MD,$@.d -c $(BUILD_CFLAGS) $(MACROS) $(INCLUDE_DIRS) $(OUTPUT_FLAGS) -o $@ $<

$(obj_path)/%.o : %.S
	if [ ! -d $(obj_path) ]; then mkdir -p $(obj_path); fi
	$(CC) -Wp,-MD,$@.d -c $(BUILD_CFLAGS) $(MACROS) $(INCLUDE_DIRS) $(OUTPUT_FLAGS) -o $@ $<

clean:
	@for dir in $(dir-y); do $(Q)$(MAKE) -C $$dir -f $(BUILD_SCRIPT) clean; done
	rm -rf $(ouput-obj) $(build-obj) $(depend-obj)

distclean:
	@for dir in $(dir-y); do $(Q)$(MAKE) -C $$dir -f $(BUILD_SCRIPT) distclean; done
	rm -rf $(ouput-obj) $(build-obj) $(depend-obj)
	rm -rf $(obj_path)

debug:
	@for dir in $(dir-y); do $(Q)$(MAKE) -C $$dir -f $(BUILD_SCRIPT) debug; done
	@echo '==========>' $(obj-y)

# end of file
